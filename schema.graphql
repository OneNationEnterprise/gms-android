# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union CustomerMembershipRefTypePayload = OrderHistoryBrand | OrderHistoryGym

union CustomerPassRefTypePayload = OrderHistoryBrand | OrderHistoryGym

union MembershipRefTypePayload = ExternalBrand_VP | ExternalGym_VP

union PassRefTypePayload = ExternalBrand_VP | ExternalGym_VP

"Admins to manage brand, branches, admin platform.."
type Admin {
    adminType: AdminType!
    authId: String!
    brand: Brand
    contactNumber: String
    createdAt: Datetime!
    createdBy: Admin
    email: String!
    firstName: String!
    fullName: String!
    gender: GlobalGenderType
    gym: Gym
    id: ID!
    lastName: String
    lastUpdatedBy: Admin
    permissions: [String!]
    roles: [VendorRole_Common!]
    status: GlobalStatusType!
    updatedAt: Datetime!
}

"Admins to roles"
type AdminRole {
    admin: Admin!
    createdAt: Datetime!
    createdById: ID
    id: ID!
    lastUpdatedById: ID
    role: VendorRole_Common!
    updatedAt: Datetime!
}

type AdminsPayload {
    list: [Admin!]
    paging: PaginatorOutput
}

type Age {
    from: Int!
    to: Int!
}

type Amenity {
    icon: String
    id: ID!
    name: String!
    status: GlobalStatusType!
}

"Brands/Gyms"
type Brand {
    admins: [Admin!]
    city: String!
    country: VendorCountry_Common!
    createdAt: Datetime!
    createdBy: Admin!
    email: String!
    gymCount: Int!
    id: ID!
    image: String
    lastUpdatedBy: Admin!
    legalName: String!
    logo: String!
    name: String!
    phone: String!
    state: String!
    status: BrandStatus!
    street: String!
    unitNumber: String!
    updatedAt: Datetime!
    zipCode: String!
}

"BrandAdmin"
type BrandAdmin {
    admin: Admin!
    brand: Brand!
    createdAt: Datetime!
    createdBy: Admin!
    id: ID!
    lastUpdatedBy: Admin!
    updatedAt: Datetime!
}

type BrandAdminsPayload {
    list: [BrandAdmin]
    paging: PaginatorOutput
}

type BrandsPayload {
    list: [Brand]
    paging: PaginatorOutput
}

type BuyAMembershipPayload {
    error: OrderMembershipError
    errorMessage: String
    errors: [OrderMembershipError!]
    orderMembership: OrderMembership
}

type BuyAPassPayload {
    error: OrderPassError
    errorMessage: String
    errors: [OrderPassError!]
    orderPass: OrderPass
}

type ContentElement {
    contentGroup: ContentGroup!
    contentType: ContentType!
    createdAt: Datetime!
    createdById: ID!
    data: ContentElementData
    id: ID!
    lastUpdatedById: ID!
    orderNo: Int!
    reference: String!
    status: GlobalStatusType!
    type: ContentElementType!
    updatedAt: Datetime!
}

type ContentElementData {
    description: String
    name: String!
    options: [ContentElementDataOption]
    placeHolder: String
    required: Boolean!
    value: String
}

type ContentElementDataOption {
    id: String!
    label: String!
}

type ContentElementValue {
    contentElement: ContentElement
    contentGroup: ContentGroup
    contentType: ContentType
    createdAt: Datetime!
    createdById: ID
    customer: Customer!
    data: ContentElementData
    fieldValue: String!
    id: ID!
    lastUpdatedById: ID
    orderNo: Int!
    reference: String!
    status: GlobalStatusType!
    type: ContentElementType!
    updatedAt: Datetime!
}

type ContentElementValuesPayload {
    list: [ContentElementValue]
    paging: PaginatorOutput
}

type ContentElementsPayload {
    list: [ContentElement]
    paging: PaginatorOutput
}

type ContentGroup {
    contentElements: [ContentElement]
    contentType: ContentType!
    createdAt: Datetime!
    createdById: ID!
    description: String
    id: ID!
    lastUpdatedById: ID!
    name: String!
    orderNo: Int!
    status: GlobalStatusType!
    updatedAt: Datetime!
}

type ContentGroupsPayload {
    list: [ContentGroup]
    paging: PaginatorOutput
}

type ContentType {
    contentElements: [ContentElement]
    contentGroups: [ContentGroup]
    createdAt: Datetime!
    createdById: ID!
    id: ID!
    lastUpdatedById: ID!
    status: GlobalStatusType!
    type: ContentTypes!
    updatedAt: Datetime!
}

type ContentTypesPayload {
    list: [ContentType]
    paging: PaginatorOutput
}

type CountriesPayload {
    list: [Country]
    paging: PaginatorOutput
}

type Country {
    currency: CurrencyDetails!
    dialCode: String
    flagPhoto: String
    id: ID!
    isoCode: String
    languages: [Language]!
    name: String!
    servicePhoneNumber: String
    status: StatusType
    timeZoneIdentifier: String
    vat: Float!
    vatId: String
}

type CurrencyDetails {
    code: String!
    decimalPlace: Int!
    lowestDenomination: Float!
    name: String!
    subUnitName: String!
    symbol: String
}

"Customer/Users..."
type Customer {
    authId: String!
    contactNumber: String
    country: Country!
    countryId: ID!
    createdAt: Datetime!
    dob: Date
    email: String!
    firstName: String!
    fullName: String!
    gender: GlobalGenderType
    id: ID!
    isEmailVerified: Boolean!
    isPhoneVerified: Boolean!
    lastName: String!
    photo: String
    status: GlobalStatusType!
    updatedAt: Datetime!
}

type CustomerMedicalFormPayload {
    error: CustomerError
    errorMessage: String
    errors: [CustomerError!]
    medicalForm: [ContentElementValue]
}

"CustomerMembership.."
type CustomerMembership {
    accessType: CustomerMembershipAccessType!
    age: Age
    allowedCheckins: Int
    amount: CurrencyValue!
    amountLabel: String!
    colorCode: String
    countryId: ID!
    createdAt: Datetime!
    customer: OrderHistoryCustomer!
    description: String
    gender: GlobalGenderType!
    gracePeriod: Int
    id: ID!
    image: String
    isWeekelyScheduled: Boolean!
    lifetime: Boolean
    membershipId: ID!
    name: String!
    paymentMethod: CustomerPaymentMethod!
    period: Int
    referenceType: CustomerMembershipRefTypePayload
    schedule: [CustomerMembershipWeeklySchedule!]
    status: MembershipStatus!
    updatedAt: Datetime!
}

type CustomerMembershipWeeklySchedule {
    closeAllDay: Boolean!
    createdAt: Datetime!
    customerMembership: CustomerMembership!
    day: Int!
    duration: Float
    id: ID!
    openTime: LocalTime
    updatedAt: Datetime!
}

type CustomerMembershipsPayload {
    list: [CustomerMembership]
    paging: PaginatorOutput
}

"CustomerPass.."
type CustomerPass {
    accessType: CustomerPassAccessType!
    age: Age
    allowedCheckins: Int
    amount: CurrencyValue!
    amountLabel: String!
    colorCode: String
    countryId: ID!
    createdAt: Datetime!
    customer: OrderHistoryCustomer!
    description: String
    gender: GlobalGenderType!
    gracePeriod: Int
    id: ID!
    image: String
    isWeekelyScheduled: Boolean!
    name: String!
    passCategoryId: ID
    passId: ID!
    paymentMethod: CustomerPaymentMethod!
    period: Int
    referenceType: CustomerPassRefTypePayload
    schedule: [CustomerPassWeeklySchedule!]
    status: PassStatus!
    type: PassType!
    updatedAt: Datetime!
}

type CustomerPassWeeklySchedule {
    closeAllDay: Boolean!
    createdAt: Datetime!
    customerPass: CustomerPass!
    day: Int!
    duration: Float
    id: ID!
    openTime: LocalTime
    updatedAt: Datetime!
}

type CustomerPassesPayload {
    list: [CustomerPass]
    paging: PaginatorOutput
}

type CustomerPaymentMethod {
    id: ID!
    orderType: String!
    paymentMethod: FormatterPaymentMethod
    provider: String
    type: String
}

type CustomersPayload {
    list: [Customer]
    paging: PaginatorOutput
}

type ExternalBrand_VP {
    countryId: ID!
    email: String!
    id: ID!
    legalName: String
    logo: String!
    name: String!
    phone: String!
    status: GlobalStatusType!
}

"Brands"
type ExternalBrand_Vendors {
    country: VendorsShopCountry_Common!
    email: String!
    id: ID!
    legalName: String
    logo: String!
    name: String!
    phone: String!
    status: GlobalStatusType!
}

type ExternalBrand_VendorsPayload {
    list: [ExternalBrand_Vendors]
    paging: PaginatorOutput
}

type ExternalGym_VP {
    brandId: ID!
    email: String!
    id: ID!
    legalName: String
    logo: String!
    name: String!
    phone: String!
    status: GlobalStatusType!
}

"Gyms."
type ExternalGym_Vendors {
    brand: ExternalBrand_Vendors!
    email: String!
    id: ID!
    legalName: String
    logo: String!
    name: String!
    phone: String
    status: GlobalStatusType!
}

type ExternalInstructor_VP {
    authId: String
    contactNumber: String!
    email: String!
    firstName: String!
    id: ID!
    lastName: String
    photo: String
    status: GlobalStatusType!
}

type FavouriteGymClassPayload {
    error: GymClassError
    errorMessage: String
    errors: [GymClassError!]
    favourite: Boolean
}

type FavouriteGymClassesPayload {
    list: [GymClass!]
    paging: PaginatorOutput
}

type FormatterPaymentMethod {
    referenceId: String
}

"Gyms"
type Gym {
    address: GymAddress!
    admins: [Admin!]
    amenities: [String!]
    amenityList: [Amenity!]
    brand: Brand!
    createdAt: Datetime!
    createdBy: Admin!
    description: String
    distance: Float
    email: String!
    id: ID!
    images: [String!]!
    lastUpdatedBy: Admin!
    legalName: String!
    name: String!
    opening: GymOpening
    operatingHours: [GymOperatingHours]
    phone: String!
    status: GymStatus!
    updatedAt: Datetime!
}

"Gym Address"
type GymAddress {
    building: String
    city: String!
    country: VendorCountry_Common!
    createdAt: Datetime!
    floorNo: String
    "The longitude component of the geo coordinates for this address, in degrees"
    geoLocation: GymAddressGeoLocation!
    gym: Gym!
    id: ID!
    shortAddress: String
    state: String
    street: String
    unitNumber: String
    updatedAt: Datetime!
    zipCode: String
}

type GymAddressGeoLocation {
    coordinates: [Float]
    type: String
}

"GymAdmin"
type GymAdmin {
    admin: Admin!
    createdAt: Datetime!
    createdBy: Admin!
    gym: Gym!
    id: ID!
    lastUpdatedBy: Admin!
    updatedAt: Datetime!
}

type GymAdminsPayload {
    list: [GymAdmin]
    paging: PaginatorOutput
}

type GymClass {
    age: Age
    amount: CurrencyValue!
    brand: ExternalBrand_VP!
    countryId: ID!
    createdAt: Datetime!
    createdById: ID!
    description: String
    difficultyLevel: DifficultyLevel!
    duration: Float
    endDate: Date
    estimatedCaloriesBurnt: String!
    gender: GlobalGenderType!
    gym: ExternalGym_VP!
    gymClassCategory: GymClassCategory!
    id: ID!
    images: [String!]
    instructor: ExternalInstructor_VP
    isWeekelyScheduled: Boolean!
    lastUpdatedById: ID!
    name: String!
    openTime: LocalTime
    schedule: [GymClassWeeklySchedule!]
    spots: Int!
    spotsAlotted: Int
    startDate: Date!
    status: GlobalStatusType
    updatedAt: Datetime!
}

type GymClassCategory {
    createdAt: Datetime!
    description: String
    gymClasses: [GymClass!]
    id: ID!
    image: String
    name: String!
    status: GlobalStatusType
    subtitle: String
    updatedAt: Datetime!
}

type GymClassCategoryPayload {
    list: [GymClassCategory]
    paging: PaginatorOutput
}

type GymClassWeeklySchedule {
    closeAllDay: Boolean!
    createdAt: Datetime!
    day: Int!
    duration: Float
    id: ID!
    instructor: ExternalInstructor_VP
    openTime: LocalTime
    updatedAt: Datetime!
}

type GymClassesPayload {
    list: [GymClass]
    paging: PaginatorOutput
}

type GymOpening {
    isOpen: Boolean!
    operatingTime: TimeRange
}

"Gym Operating Hours"
type GymOperatingHours {
    closeAllDay: Boolean!
    createdAt: Datetime!
    createdBy: Admin!
    day: Int!
    id: ID!
    lastUpdatedBy: Admin!
    openAllDay: Boolean!
    openDuration: Int
    openTime: LocalTime
    updatedAt: Datetime!
}

type GymsPayload {
    list: [Gym!]
    paging: PaginatorOutput
}

"Instructor/Users"
type Instructor {
    authId: String!
    brand: Brand!
    contactNumber: String
    createdAt: Datetime!
    email: String!
    firstName: String!
    gender: GlobalGenderType!
    gym: Gym!
    id: ID
    lastName: String
    photo: String
    status: GlobalStatusType!
    updatedAt: Datetime!
}

type InstructorsPayload {
    list: [Instructor]
    paging: PaginatorOutput
}

type InvoiceComponent {
    label: String
    type: InvoiceComponentType!
    value: CurrencyValue
}

type Language {
    code: String!
    countries: [Country]!
    id: ID!
    name: String!
    status: StatusType!
}

type LanguageCountriessPayload {
    list: [LanguageCountry]
    paging: PaginatorOutput
}

type LanguageCountry {
    country: Country!
    createdAt: Datetime!
    id: ID!
    language: Language!
    updatedAt: Datetime!
}

type LanguagesPayload {
    list: [Language]
    paging: PaginatorOutput
}

"Membership.."
type Membership {
    accessType: MembershipAccessType!
    age: Age
    allowedCheckins: Int
    amount: CurrencyValue!
    amountLabel: String!
    colorCode: String
    countryId: ID!
    createdAt: Datetime!
    createdById: ID!
    description: String
    gender: GlobalGenderType!
    gracePeriod: Int
    id: ID!
    image: String
    isWeekelyScheduled: Boolean!
    lastUpdatedById: ID!
    lifetime: Boolean
    membershipCategory: MembershipCategory!
    membershipSubCategory: MembershipSubCategory
    name: String!
    period: Int
    referenceType: MembershipRefTypePayload
    schedule: [MembershipWeeklySchedule!]
    status: GlobalStatusType!
    updatedAt: Datetime!
}

type MembershipCategory {
    createdAt: Datetime!
    description: String
    id: ID!
    image: String
    name: String!
    status: GlobalStatusType
    subCategories: [MembershipSubCategory!]
    updatedAt: Datetime!
}

type MembershipCategoryPayload {
    list: [MembershipCategory]
    paging: PaginatorOutput
}

type MembershipInvoice {
    components: [InvoiceComponent!]
    currency: VendorPlanCurrency_Common
    error: MembershipError
    errorMessage: String
    errors: [MembershipError]
}

type MembershipSubCategory {
    createdAt: Datetime!
    description: String
    id: ID!
    image: String
    membershipCategory: MembershipCategory!
    name: String!
    status: GlobalStatusType
    updatedAt: Datetime!
}

type MembershipSubCategoryPayload {
    list: [MembershipSubCategory]
    paging: PaginatorOutput
}

type MembershipWeeklySchedule {
    closeAllDay: Boolean!
    createdAt: Datetime!
    day: Int!
    duration: Float
    id: ID!
    membership: Membership!
    openTime: LocalTime
    updatedAt: Datetime!
}

type MembershipsPayload {
    list: [Membership]
    paging: PaginatorOutput
}

type Mutation {
    amenityUpsert(input: AmenityInput!): SaveAmenityPayload
    buyAMembership(input: BuyAMembershipInput!): BuyAMembershipPayload
    buyAPass(input: BuyAPassInput!): BuyAPassPayload
    countryUpsert(input: CountryInput!): SaveCountryPayload
    favouriteGymClass(input: FavouriteGymClassInput!): FavouriteGymClassPayload
    languageUpsert(input: LanguageInput!): SaveLanguagePayload
    registerCustomer(input: RegisterCustomerInput!): RegisterCustomerPayload
    registerInstructor(input: RegisterInstructorInput!): RegisterInstructorPayload
    saveAdmin(input: SaveAdminInput!): SaveAdminPayload
    saveBrand(input: SaveBrandInput!): SaveBrandPayload
    saveBrandAdmin(input: SaveBrandAdminInput!): SaveBrandAdminPayload
    saveBrandStatusUpdate(input: SaveBrandStatusInput!): SaveBrandPayload
    saveBrandsAdminsTable(brandId: ID!, input: [SaveBrandsAdminsTableInput]): SaveBrandAdminTablePayload
    saveContentElement(input: SaveContentElementInput!): SaveContentElementPayload
    saveContentElementValue(input: SaveContentElementValueInput!): SaveContentElementValuePayload
    saveContentGroup(input: SaveContentGroupInput!): SaveContentGroupPayload
    saveContentType(input: SaveContentTypeInput!): SaveContentTypePayload
    saveCustomer(input: SaveCustomerInput!): SaveCustomerPayload
    saveCustomerMedicalForm(input: CustomerMedicalForm!): CustomerMedicalFormPayload
    saveCustomerPhoto(input: CustomerPhotoInput!): RegisterCustomerPayload
    saveGym(input: SaveGymInput!): SaveGymPayload
    saveGymAdmin(input: SaveGymAdminInput!): SaveGymAdminPayload
    saveGymClass(input: SaveGymClassInput!): SaveGymClassPayload
    saveGymClassCategory(input: SaveGymClassCategoryInput!): SaveGymClassCategoryPayload
    saveGymOperatingHours(gymId: ID!, input: [SaveGymOperatingHoursInput!]!): SaveGymOperatingHoursPayload
    saveGymStatusUpdate(input: SaveGymStatusInput!): SaveGymPayload
    saveGymsAdminsTable(gymId: ID!, input: [SaveGymsAdminsTableInput]): SaveGymAdminTablePayload
    saveInstructor(input: SaveInstructorInput!): SaveInstructorPayload
    saveInstructorStatusUpdate(input: SaveInstructorStatusInput!): SaveInstructorPayload
    saveLanguageCountry(input: SaveLanguageCountryInput!): SaveLanguageCountryPayload
    saveMembership(input: SaveMembershipInput!): SaveMembershipPayload
    saveMembershipCategory(input: SaveMembershipCategoryInput!): SaveMembershipCategoryPayload
    saveMembershipSubCategory(input: SaveMembershipSubCategoryInput!): SaveMembershipSubCategoryPayload
    savePass(input: SavePassInput!): SavePassPayload
    savePassCategory(input: SavePassCategoryInput!): SavePassCategoryPayload
    savePermission(input: SavePermissionInput!): SavePermissionPayload
    saveProduct(input: SaveProductInput!): SaveProductPayload
    saveProductCategory(input: SaveProductCategoryInput!): SaveProductCategoryPayload
    saveProductStock(input: SaveProductStockInput!): SaveProductStockPayload
    saveRole(input: SaveRoleInput!): SaveRolePayload
    saveStoreImage(input: SaveStoreImageInput!): SaveStoreImagePayload
    sortContentElement(contentGroupId: ID!, ids: [ID!]!): Boolean
    sortContentGroup(contentTypeId: ID!, ids: [ID!]!): Boolean
    syncAdminsWithFirebase: Boolean
    syncCustomerKafka: Boolean
    syncCustomersWithFirebase: Boolean
    syncInstructorsWithFirebase: Boolean
    unFavouriteGymClass(input: FavouriteGymClassInput!): FavouriteGymClassPayload
}

type OrderHistoryBrand {
    countryId: ID!
    email: String!
    id: ID!
    legalName: String
    logo: String!
    name: String!
    phone: String!
    status: GlobalStatusType!
}

type OrderHistoryCountry {
    currency: OrderHistoryCurrency!
    dialCode: String
    flagPhoto: String
    id: ID!
    isoCode: String
    name: String!
    servicePhoneNumber: String
    status: GlobalStatusType
    timeZoneIdentifier: String
    vat: Float!
    vatId: String
}

type OrderHistoryCurrency {
    code: String!
    decimalPlace: Int!
    lowestDenomination: Float!
    name: String!
    subUnitName: String!
    symbol: String
}

type OrderHistoryCustomer {
    authId: String!
    contactNumber: String
    country: OrderHistoryCountry!
    createdAt: Datetime!
    dob: Date
    email: String!
    firstName: String!
    fullName: String!
    gender: GlobalGenderType
    id: ID!
    isEmailVerified: Boolean!
    isPhoneVerified: Boolean!
    lastName: String!
    photo: String
    status: GlobalStatusType!
    updatedAt: Datetime!
}

type OrderHistoryGym {
    brandId: ID!
    email: String!
    id: ID!
    legalName: String
    logo: String!
    name: String!
    phone: String!
    status: GlobalStatusType!
}

"Memberships bought by customers"
type OrderMembership {
    createdAt: Datetime!
    customerId: ID!
    id: ID!
    membershipId: ID!
    paymentMethod: PaymentMethod!
    paymentStatus: PaymentStatus!
    shortCode: String!
    status: MembershipStatus!
    updatedAt: Datetime!
}

"Passes bought by customers"
type OrderPass {
    createdAt: Datetime!
    customerId: ID!
    id: ID!
    passId: ID!
    paymentMethod: PaymentMethod!
    paymentStatus: PaymentStatus!
    shortCode: String!
    status: PassStatus!
    updatedAt: Datetime!
}

type PaginatorOutput {
    limit: Int!
    page: Int!
    totalPages: Int!
}

type Pass {
    accessType: PassAccessType!
    age: Age
    allowedCheckins: Int!
    amount: CurrencyValue!
    colorCode: String
    countryId: ID!
    createdAt: Datetime!
    createdById: ID!
    description: String
    gender: GlobalGenderType!
    gracePeriod: Int!
    id: ID!
    image: String!
    isWeekelyScheduled: Boolean!
    lastUpdatedById: ID!
    name: String!
    passCategory: PassCategory
    period: Int!
    referenceType: PassRefTypePayload
    schedule: [PassWeeklySchedule!]
    status: GlobalStatusType
    type: PassType!
    updatedAt: Datetime!
}

type PassCategory {
    createdAt: Datetime!
    description: String
    id: ID!
    image: String
    name: String!
    status: GlobalStatusType
    updatedAt: Datetime!
}

type PassCategoryPayload {
    list: [PassCategory]
    paging: PaginatorOutput
}

type PassInvoice {
    components: [InvoiceComponent!]
    currency: VendorPlanCurrency_Common
    error: MembershipError
    errorMessage: String
    errors: [MembershipError]
}

type PassWeeklySchedule {
    closeAllDay: Boolean!
    createdAt: Datetime!
    day: Int!
    duration: Float
    id: ID!
    openTime: LocalTime
    pass: Pass!
    updatedAt: Datetime!
}

type PassesPayload {
    list: [Pass]
    paging: PaginatorOutput
}

type PaymentMethod {
    id: ID!
    orderType: OrderType!
    paymentMethod: FormatterPaymentMethod
    provider: String
    type: String
}

"Permission"
type Permission {
    createdAt: Datetime!
    createdById: ID
    description: String
    id: ID!
    lastUpdatedById: ID
    name: String!
    roles: [Role]
    status: StatusType!
    updatedAt: Datetime!
}

type PermissionsPayload {
    list: [Permission]
    paging: PaginatorOutput
}

"Products."
type Product {
    barcode: String!
    bestSeller: GlobalStatusType
    brand: ExternalBrand_Vendors
    brandId: ID!
    category: ProductCategory
    categoryId: ID!
    countryId: ID!
    createdAt: Datetime!
    createdBy: ID!
    description: String!
    express: Boolean!
    id: ID!
    images: [String!]
    inventory: [ProductStock!]
    lastUpdatedBy: ID!
    listPrice: Float!
    name: String!
    returnPolicy: Boolean!
    returnPolicyDescription: String
    returnPolicyPeriod: Int
    salePrice: Float!
    sku: String!
    status: GlobalStatusType!
    updatedAt: Datetime!
    warranty: Boolean!
    warrantyDescription: String
    warrantyPeriod: Int
}

type ProductCategoriesPayload {
    list: [ProductCategory]
    paging: PaginatorOutput
}

"Product Categories."
type ProductCategory {
    createdAt: Datetime!
    createdBy: ID!
    id: ID!
    image: String
    lastUpdatedBy: ID!
    name: String!
    status: GlobalStatusType!
    updatedAt: Datetime!
}

type ProductInvoice {
    components: [ProductInvoiceComponent!]
    currency: VendorsShopCurrency_Common
    error: ProductError
    errorMessage: String
    errors: [ProductError]
}

type ProductInvoiceComponent {
    label: String
    type: InvoiceComponentType!
    value: CurrencyValue
}

"Product Stocks."
type ProductStock {
    createdAt: Datetime!
    createdBy: ID!
    gymId: ID!
    id: ID!
    lastUpdatedBy: ID!
    productId: ID!
    quantity: Int!
    updatedAt: Datetime!
}

type ProductStocksPayload {
    list: [ProductStock]
    paging: PaginatorOutput
}

type ProductsPayload {
    list: [Product]
    paging: PaginatorOutput
}

type Query {
    admin(id: ID!): Admin
    adminByEmail(email: String!): Admin
    admins(paging: PaginatorInput!, params: AdminsFilter): AdminsPayload!
    amenities(filter: AmenityFilter): [Amenity]
    brand(id: ID!): Brand!
    brandAdmin(id: ID!): BrandAdmin
    brandAdmins(paging: PaginatorInput!, params: BrandAdminsFilter): BrandAdminsPayload!
    brands(paging: PaginatorInput, params: BrandsFilter): BrandsPayload!
    contentElement(id: ID!): ContentElement
    contentElementValue(id: ID!): ContentElementValue
    contentElementValues(paging: PaginatorInput!, params: ContentElementValuesFilter): ContentElementValuesPayload
    contentElements(paging: PaginatorInput!, params: ContentElementsFilter): ContentElementsPayload
    contentGroup(id: ID!): ContentGroup
    contentGroups(paging: PaginatorInput!, params: ContentGroupsFilter): ContentGroupsPayload
    contentType(id: ID!): ContentType
    contentTypes(paging: PaginatorInput!, params: ContentTypesFilter): ContentTypesPayload
    countries(filter: CountryFilter, paging: PaginatorInput): CountriesPayload!
    countriesById(ids: [ID!]!): [Country!]!
    country(id: ID!): Country!
    customer(id: ID!): Customer
    "Lookup a customer by the currently logged in user id"
    customerByAuth: Customer
    customerByEmail(email: String!): Customer
    customerMembership(id: ID!): CustomerMembership!
    customerMembershipSchedule(customerMembershipId: ID!): [CustomerMembershipWeeklySchedule!]
    customerMemberships(paging: PaginatorInput, params: CustomerMembershipsFilter): CustomerMembershipsPayload!
    customerPass(id: ID!): CustomerPass!
    customerPassSchedule(customerPassId: ID!): [CustomerPassWeeklySchedule!]
    customerPasses(paging: PaginatorInput, params: CustomerPassesFilter): CustomerPassesPayload!
    customers(paging: PaginatorInput!, params: CustomersFilter): CustomersPayload!
    favouriteGymClasses(paging: PaginatorInput, params: GymClassesFilter): FavouriteGymClassesPayload!
    getMedicalForm: [ContentGroup!]!
    gym(id: ID!): Gym!
    gymAddress(gymId: ID!): GymAddress
    gymAdmin(id: ID!): GymAdmin
    gymAdmins(paging: PaginatorInput!, params: GymAdminsFilter): GymAdminsPayload!
    gymClass(id: ID!): GymClass!
    gymClassCategories(paging: PaginatorInput, params: GymClassCategoryFilter): GymClassCategoryPayload!
    gymClassCategory(id: ID!): GymClassCategory!
    gymClassSechedule(gymClassId: ID!): [GymClassWeeklySchedule!]
    gymClasses(paging: PaginatorInput, params: GymClassesFilter): GymClassesPayload!
    gymOperatingHours(gymId: ID!): [GymOperatingHours]
    gyms(paging: PaginatorInput!, params: GymsFilter): GymsPayload!
    gymsInRadius(paging: PaginatorInput!, params: GymsInRadiusFilter): GymsPayload!
    instructor(id: ID!): Instructor
    instructorByEmail(email: String!): Instructor
    instructors(paging: PaginatorInput, params: InstructorsFilter): InstructorsPayload!
    language(id: ID!): Language!
    languageCountries(filter: LanguageCountriessFilter, paging: PaginatorInput!): LanguageCountriessPayload!
    languageCountry(id: ID!): LanguageCountry
    languages(filter: LanguageFilter, paging: PaginatorInput!): LanguagesPayload!
    membership(id: ID!): Membership!
    membershipCategories(paging: PaginatorInput, params: MembershipCategoryFilter): MembershipCategoryPayload!
    membershipCategory(id: ID!): MembershipCategory!
    membershipInvoice(input: MembershipInvoiceInput!): MembershipInvoice!
    membershipSechedule(membershipId: ID!): [MembershipWeeklySchedule!]
    membershipSubCategories(paging: PaginatorInput, params: MembershipSubCategoryFilter): MembershipSubCategoryPayload!
    membershipSubCategory(id: ID!): MembershipSubCategory!
    memberships(paging: PaginatorInput, params: MembershipsFilter): MembershipsPayload!
    pass(id: ID!): Pass!
    passCategories(paging: PaginatorInput, params: PassCategoryFilter): PassCategoryPayload!
    passCategory(id: ID!): PassCategory!
    passInvoice(input: PassInvoiceInput!): PassInvoice!
    passSechedule(membershipId: ID!): [PassWeeklySchedule!]
    passes(paging: PaginatorInput, params: PassesFilter): PassesPayload!
    permission(id: ID!): Permission
    permissions(paging: PaginatorInput!, params: PermissionsFilter): PermissionsPayload!
    product(id: ID!): Product!
    productCategories(paging: PaginatorInput!, params: ProductCategoriesFilter): ProductCategoriesPayload!
    productCategory(id: ID!): ProductCategory!
    productInvoice(input: ProductInvoiceInput!): ProductInvoice!
    productStock(id: ID!): ProductStock!
    productStocks(paging: PaginatorInput!, params: ProductStocksFilter): ProductStocksPayload!
    products(paging: PaginatorInput!, params: ProductsFilter): ProductsPayload!
    role(id: ID!): Role
    rolePermission(id: ID!): RolePermission
    rolePermissions(paging: PaginatorInput!, params: RolePermissionsFilter): RolePermissionsPayload!
    roles(paging: PaginatorInput!, params: RolesFilter): RolesPayload!
    storeHome(input: StoreHomeInput): StoreHomePayload!
    storeImage(id: ID!): StoreImage!
    storeImages(paging: PaginatorInput!, params: StoreImagesFilter): StoreImagesPayload!
    stores(paging: PaginatorInput!, params: ExternalBrand_VendorsFiler): ExternalBrand_VendorsPayload!
}

type RegisterCustomerPayload {
    customer: Customer
    error: CustomerError
    errorMessage: String
    errors: [CustomerError!]
}

type RegisterInstructorPayload {
    error: InstructorError
    errorMessage: String
    errors: [InstructorError!]
    instructor: Instructor
    password: String
}

"Role"
type Role {
    createdAt: Datetime!
    createdById: ID
    description: String
    id: ID!
    lastUpdatedById: ID
    name: String!
    permissions: [Permission]
    status: StatusType!
    updatedAt: Datetime!
}

"RolePermission"
type RolePermission {
    createdAt: Datetime!
    createdById: ID
    id: ID!
    lastUpdatedById: ID
    permission: Permission!
    role: Role!
    updatedAt: Datetime!
}

type RolePermissionsPayload {
    list: [RolePermission]
    paging: PaginatorOutput
}

type RolesPayload {
    list: [Role]
    paging: PaginatorOutput
}

type SaveAdminPayload {
    admin: Admin
    error: AdminError
    errorMessage: String
    errors: [AdminError!]
    password: String
}

type SaveAmenityPayload {
    amenity: Amenity
    error: AmenityError
    errors: [AmenityError!]
}

type SaveBrandAdminPayload {
    brandAdmin: BrandAdmin
    error: BrandAdminError
    errors: [BrandAdminError!]
}

type SaveBrandAdminTablePayload {
    error: BrandAdminError
    errors: [BrandAdminError!]
    updated: Boolean
}

type SaveBrandPayload {
    brand: Brand
    error: BrandError
    errorMessage: String
    errors: [BrandError!]
}

type SaveContentElementPayload {
    contentElement: ContentElement
    error: ContentElementError
    errors: [ContentElementError!]
}

type SaveContentElementValuePayload {
    contentElementValue: ContentElementValue
    error: ContentElementValueError
    errors: [ContentElementValueError!]
}

type SaveContentGroupPayload {
    contentGroup: ContentGroup
    error: ContentGroupError
    errors: [ContentGroupError!]
}

type SaveContentTypePayload {
    contentType: ContentType
    error: ContentTypeError
    errors: [ContentTypeError!]
}

type SaveCountryPayload {
    country: Country
    error: CountryError
    errors: [CountryError!]
}

type SaveCustomerPayload {
    customer: Customer
    error: CustomerError
    errorMessage: String
    errors: [CustomerError!]
}

type SaveGymAdminPayload {
    error: GymAdminError
    errors: [GymAdminError!]
    gymAdmin: GymAdmin
}

type SaveGymAdminTablePayload {
    error: GymAdminError
    errors: [GymAdminError!]
    updated: Boolean
}

type SaveGymClassCategoryPayload {
    error: GymClassCategoryError
    errorMessage: String
    errors: [GymClassCategoryError!]
    gymClassCategory: GymClassCategory
}

type SaveGymClassPayload {
    error: GymClassError
    errors: [GymClassError!]
    gymClass: GymClass
}

type SaveGymOperatingHoursPayload {
    error: GymOperatingHoursError
    errors: [GymOperatingHoursError!]
    updated: Boolean
}

type SaveGymPayload {
    error: GymError
    errorMessage: String
    errors: [GymError!]
    gym: Gym
}

type SaveInstructorPayload {
    error: InstructorError
    errorMessage: String
    errors: [InstructorError!]
    instructor: Instructor
}

type SaveLanguageCountryPayload {
    error: LanguageCountryError
    errors: [LanguageCountryError!]
    languageCountry: LanguageCountry
}

type SaveLanguagePayload {
    error: LanguageError
    errors: [LanguageError!]
    language: Language
}

type SaveMembershipCategoryPayload {
    error: MembershipCategoryError
    errorMessage: String
    errors: [MembershipCategoryError!]
    membershipCategory: MembershipCategory
}

type SaveMembershipPayload {
    error: MembershipError
    errors: [MembershipError!]
    membership: Membership
}

type SaveMembershipSubCategoryPayload {
    error: MembershipSubCategoryError
    errorMessage: String
    errors: [MembershipSubCategoryError!]
    membershipSubCategory: MembershipSubCategory
}

type SavePassCategoryPayload {
    error: PassCategoryError
    errorMessage: String
    errors: [PassCategoryError!]
    passCategory: PassCategory
}

type SavePassPayload {
    error: MembershipError
    errors: [MembershipError!]
    pass: Pass
}

type SavePermissionPayload {
    error: PermissionError
    errors: [PermissionError!]
    permission: Permission
}

type SaveProductCategoryPayload {
    error: ProductCategoryError
    errors: [ProductCategoryError!]
    productCategory: ProductCategory
}

type SaveProductPayload {
    error: ProductError
    errors: [ProductError!]
    product: Product
}

type SaveProductStockPayload {
    error: ProductStockError
    errors: [ProductStockError!]
    productStock: ProductStock
}

type SaveRolePayload {
    error: RoleError
    errors: [RoleError!]
    role: Role
}

type SaveStoreImagePayload {
    StoreImage: StoreImage
    error: StoreImageError
    errors: [StoreImageError!]
}

type StoreHomePayload {
    bestSellers: [Product!]
    categories: [ProductCategory!]
    storeImages: [StoreImage!]
    stores: [ExternalBrand_Vendors!]
}

"Store Image."
type StoreImage {
    createdAt: Datetime!
    createdBy: ID!
    id: ID!
    image: String!
    lastUpdatedBy: ID!
    status: GlobalStatusType!
    updatedAt: Datetime!
}

type StoreImagesPayload {
    list: [StoreImage]
    paging: PaginatorOutput
}

type TimeRange {
    begin: Datetime!
    end: Datetime!
}

type VendorCountry_Common {
    currency: VendorCurrency_Common!
    dialCode: String
    flagPhoto: String
    id: ID!
    isoCode: String
    name: String!
    servicePhoneNumber: String
    status: GlobalStatusType
    timeZoneIdentifier: String
    vat: Float!
    vatId: String
}

type VendorCurrency_Common {
    code: String!
    decimalPlace: Int!
    lowestDenomination: Float!
    name: String!
    subUnitName: String!
    symbol: String
}

type VendorPermission_Common {
    id: ID!
    name: String
    status: GlobalStatusType!
}

type VendorPlanCountry_Common {
    currency: VendorPlanCurrency_Common!
    dialCode: String
    flagPhoto: String
    id: ID!
    isoCode: String
    name: String!
    servicePhoneNumber: String
    status: GlobalStatusType
    timeZoneIdentifier: String
    vat: Float!
    vatId: String
}

type VendorPlanCurrency_Common {
    code: String!
    decimalPlace: Int!
    lowestDenomination: Float!
    name: String!
    subUnitName: String!
    symbol: String
}

type VendorRole_Common {
    id: ID!
    name: String
    permissions: [VendorPermission_Common!]
    status: GlobalStatusType!
}

type VendorsShopCountry_Common {
    currency: VendorsShopCurrency_Common!
    dialCode: String
    flagPhoto: String
    id: ID!
    isoCode: String
    name: String!
    servicePhoneNumber: String
    status: GlobalStatusType
    timeZoneIdentifier: String
    vat: Float!
    vatId: String
}

type VendorsShopCurrency_Common {
    code: String!
    decimalPlace: Int!
    lowestDenomination: Float!
    name: String!
    subUnitName: String!
    symbol: String
}

enum AdminError {
    DUPLICATE_CONTACT_NUMBER
    DUPLICATE_EMAIL
    FIREBASE
    INVALID_BRAND_ID
    INVALID_GYM_ID
    INVALID_ID
    ROLES_REQUIRED
}

enum AdminRoleError {
    DUPLICATE_EMAIL
    INVALID_ID
}

enum AdminType {
    BRANCH
    BRAND
    GLOBAL
}

enum AmenityError {
    DUPLICATE_NAME
    INVALID_ID
}

enum BrandAdminError {
    DUPLICATE_ADMIN
    INVALID_BRAND
    INVALID_ID
}

enum BrandError {
    ADMIN_ALREADY_EXISTS
    DUPLICATE_NAME
    INVALID_ID
}

enum BrandStatus {
    ACTIVE
    INACTIVE
}

enum ContentElementError {
    DUPLICATE_REFERENCE
    INVALID_DATA
    INVALID_ID
}

enum ContentElementType {
    BUTTON
    CHECKBOX
    DATE
    DROPDOWN
    RADIO
    TEXTAREA
    TEXTBOX
}

enum ContentElementValueError {
    DUPLICATE_FIELD
    INVALID_CONTENT_ELEMENT_ID
    INVALID_ID
}

enum ContentGroupError {
    DUPLICATE_NAME
    INVALID_DATA
    INVALID_ID
}

enum ContentTypeError {
    DUPLICATE_TYPE
    INVALID_ID
}

enum ContentTypes {
    MEDICAL_ID
}

enum CountryError {
    DUPLICATE_NAME
    INVALID_ID
}

enum CustomerError {
    DUPLICATE_CONTACT_NUMBER
    DUPLICATE_EMAIL
    FIELD_REQUIRED
    FIREBASE
    INVALID_CUSTOMER
    INVALID_FIELD_DATA
    INVALID_ID
}

enum CustomerMembershipAccessType {
    BRANCH
    BRAND
}

enum CustomerMembershipError {
    CHECKINS_REQUIRED
    DUPLICATE_NAME
    DURATION_REQUIRED
    GRACE_PERIOD_REQUIRED
    INVALID_CATEGORY_ID
    INVALID_CUSTOMER_MEMBERSHIP_ID
    INVALID_ID
    INVALID_SCHEDULE
    INVALID_SUB_CATEGORY_ID
    MEMBERSHIP_NOT_ACTIVE
    OPEN_TIME_REQUIRED
    PERIOD_REQUIRED
    SECHEDULE_REQUIRED
}

enum CustomerPassAccessType {
    BRANCH
    BRAND
}

enum CustomerPassError {
    CHECKINS_REQUIRED
    DUPLICATE_NAME
    DURATION_REQUIRED
    GRACE_PERIOD_REQUIRED
    INVALID_CATEGORY_ID
    INVALID_CUSTOMER_PASSID
    INVALID_ID
    INVALID_SCHEDULE
    INVALID_SUB_CATEGORY_ID
    OPEN_TIME_REQUIRED
    PASS_NOT_ACTIVE
    PERIOD_REQUIRED
    SECHEDULE_REQUIRED
}

enum DifficultyLevel {
    ADVANCE
    BEGINNER
    INTERMEDIATE
}

enum GlobalGenderType {
    ANY
    FEMALE
    MALE
}

enum GlobalStatusType {
    ACTIVE
    INACTIVE
}

enum GymAdminError {
    DUPLICATE_ADMIN
    INVALID_GYM
    INVALID_ID
}

enum GymClassCategoryError {
    DUPLICATE_NAME
    INVALID_GYM_ID
    INVALID_ID
}

enum GymClassError {
    ALREADY_FAVOURITE
    DUPLICATE_NAME
    DURATION_REQUIRED
    INSTRUCTOR_REQUIRED
    INVALID_BRAND_ID
    INVALID_CATEGORY_ID
    INVALID_CLASS_ID
    INVALID_CUSTOMER
    INVALID_DATE_RANGE
    INVALID_GYM_ID
    INVALID_ID
    INVALID_INSTRUCTOR_AUTH_ID
    INVALID_INSTRUCTOR_ID
    INVALID_SCHEDULE
    OPEN_TIME_REQUIRED
    SECHEDULE_REQUIRED
}

enum GymError {
    ADMIN_ALREADY_EXISTS
    DUPLICATE_NAME
    INVALID_ID
}

enum GymOperatingHoursError {
    DUPLICATE_DAY
    INVALID_DAY
    INVALID_GYM
    INVALID_ID
}

enum GymStatus {
    ACTIVE
    INACTIVE
}

enum InstructorError {
    DUPLICATE_CONTACT_NUMBER
    DUPLICATE_EMAIL
    FIELD_REQUIRED
    FIREBASE
    INVALID_FIELD_DATA
    INVALID_ID
    INVALID_INSTRUCTOR
}

enum InvoiceComponentType {
    "Same as total which is due on customer to pay minus the credits the customer have if payment method is credits"
    AMOUNT_DUE
    "Any service fee"
    SERVICE_FEE
    "Subtotal without discounts but after reduction the cost of items which are free"
    SUBTOTAL
    "The total cost of the order after all the discounts and perks"
    TOTAL
    "VOUCHER (amount)"
    VOUCHER
}

enum LanguageCountryError {
    DUPLICATE_PERMISSION
    INVALID_ID
}

enum LanguageError {
    DUPLICATE_NAME
    INVALID_ID
}

enum MembershipAccessType {
    BRANCH
    BRAND
}

enum MembershipCategoryError {
    DUPLICATE_NAME
    INVALID_BRAND_ID
    INVALID_GYM_ID
    INVALID_ID
}

enum MembershipError {
    CHECKINS_REQUIRED
    DUPLICATE_NAME
    DURATION_REQUIRED
    GRACE_PERIOD_REQUIRED
    INVALID_CATEGORY_ID
    INVALID_ID
    INVALID_MEMBERSHIP_ID
    INVALID_PASS_ID
    INVALID_SCHEDULE
    INVALID_SUB_CATEGORY_ID
    MEMBERSHIP_NOT_ACTIVE
    OPEN_TIME_REQUIRED
    PASS_NOT_ACTIVE
    PERIOD_REQUIRED
    SECHEDULE_REQUIRED
}

enum MembershipStatus {
    ACTIVE
    CANCELED
    INACTIVE
}

enum MembershipSubCategoryError {
    DUPLICATE_NAME
    INVALID_CATEGORY_ID
    INVALID_ID
}

enum OrderMembershipError {
    INVALID_MEMBERSHIP_ID
    MEMBERSHIP_NOT_ACTIVE
}

enum OrderPassError {
    INVALID_PASS_ID
    PASS_NOT_ACTIVE
}

enum OrderType {
    GYM_CLASS
    MEMBERSHIP
    PASS
    STORE
}

enum PassAccessType {
    BRANCH
    BRAND
}

enum PassCategoryError {
    DUPLICATE_NAME
    INVALID_GYM_ID
    INVALID_ID
}

enum PassStatus {
    ACTIVE
    CANCELED
    INACTIVE
}

enum PassType {
    ALL
    EVENING
    MORNING
    RUSH
}

enum PaymentStatus {
    FAILURE
    PENDING
    SUCCESS
}

enum PermissionError {
    DUPLICATE_NAME
    INVALID_ID
    INVALID_ROLE
    NOT_EDITABLE
}

enum ProductCategoryError {
    DUPLICATE_NAME
    INVALID_BRAND
    INVALID_ID
}

enum ProductError {
    DUPLICATE_NAME
    INVALID_ID
    INVALID_MEMBERSHIP_ID
    MEMBERSHIP_NOT_ACTIVE
}

enum ProductStockError {
    INVALID_ID
}

enum RoleError {
    DUPLICATE_NAME
    INVALID_ID
    NOT_EDITABLE
}

enum RolePermissionError {
    DUPLICATE_PERMISSION
    INVALID_ID
}

enum StatusType {
    ACTIVE
    DELETED
    INACTIVE
}

enum StoreImageError {
    INVALID_ID
}

input AdminsFilter {
    adminType: AdminType
    searchText: String
    status: GlobalStatusType
}

input AgeInput {
    from: Int!
    to: Int!
}

input AmenityFilter {
    status: String
}

input AmenityInput {
    icon: String
    id: ID
    name: String!
    status: GlobalStatusType!
}

input BrandAdminsFilter {
    adminId: ID
    brandId: ID
    searchText: String
}

input BrandsFilter {
    countryId: ID
    searchText: String
    status: BrandStatus
}

input BuyAMembershipInput {
    membershipId: ID!
}

input BuyAPassInput {
    passId: ID!
}

input ContentElementDataInput {
    description: String
    name: String!
    options: [ContentElementDataOptionInput]
    placeHolder: String
    required: Boolean!
    value: String
}

input ContentElementDataOptionInput {
    id: String!
    label: String!
}

input ContentElementValuesFilter {
    contentElementId: ID
    contentGroupId: ID
    contentTypeId: ID
    customerId: ID
    fieldValue: String
    reference: String
    searchText: String
    status: GlobalStatusType
    type: ContentElementType
}

input ContentElementsFilter {
    contentGroupId: ID
    contentTypeId: ID
    reference: String
    searchText: String
    status: GlobalStatusType
    type: ContentElementType
}

input ContentGroupsFilter {
    contentTypeId: ID
    searchText: String
    status: GlobalStatusType
}

input ContentTypesFilter {
    searchText: String
    status: GlobalStatusType
    type: ContentTypes
}

input CountryFilter {
    searchText: String
    status: String
}

input CountryInput {
    currency: CurrencyDetailsInput
    dialCode: String!
    flagPhoto: String
    id: ID
    isoCode: String!
    name: String!
    servicePhoneNumber: String!
    status: StatusType!
    timeZoneIdentifier: String!
    vat: Float!
    vatId: String
}

input CurrencyDetailsInput {
    code: String!
    decimalPlace: Int!
    lowestDenomination: Float!
    name: String!
    subUnitName: String!
    symbol: String!
}

input CustomerMedicalForm {
    contentElements: [CustomerMedicalFormField]
    customerId: ID!
}

input CustomerMedicalFormField {
    contentElementId: ID!
    fieldValue: String!
}

input CustomerMembershipsFilter {
    accessType: CustomerMembershipAccessType
    countryId: ID
    isWeekelyScheduled: Boolean
    lifetime: Boolean
    membershipCategoryId: ID
    membershipSubCategoryId: ID
    referenceTypeId: ID
    searchText: String
    status: GlobalStatusType
}

input CustomerPassesFilter {
    accessType: CustomerPassAccessType
    countryId: ID
    isWeekelyScheduled: Boolean
    passCategoryId: ID
    referenceTypeId: ID
    searchText: String
    status: GlobalStatusType
    type: PassType
}

input CustomerPhotoInput {
    id: ID!
    photo: String!
}

input CustomersFilter {
    gender: GlobalGenderType
    searchText: String
    status: GlobalStatusType
}

input ExternalBrand_VendorsFiler {
    countryId: ID
    searchText: String
    status: GlobalStatusType
}

input FavouriteGymClassInput {
    gymClassId: ID!
}

"A set of GIS co-ordinates"
input GISLocationInput {
    "Latitude, in degrees"
    latitude: Float!
    "Longitude, in degrees"
    longitude: Float!
}

input GymAdminsFilter {
    adminId: ID
    gymId: ID
    searchText: String
}

input GymClassCategoryFilter {
    gymId: ID
    searchText: String
    status: GlobalStatusType
}

input GymClassScheduleInput {
    closeAllDay: Boolean
    day: Int!
    duration: Float
    instructorAuthId: String
    instructorId: ID
    openTime: LocalTime
}

input GymClassesFilter {
    available: Boolean
    brandId: ID
    countryId: ID
    difficultyLevel: DifficultyLevel
    forDate: Date
    gymClassCategoryId: ID
    gymId: ID
    searchText: String
    status: GlobalStatusType
}

input GymsFilter {
    brandId: ID
    countryId: ID
    searchText: String
    status: GymStatus
}

input GymsInRadiusFilter {
    brandIds: [ID!]
    "User's current location"
    location: GISLocationInput!
    "Search Radius"
    radius: Float!
}

input InstructorsFilter {
    brandId: ID
    gender: GlobalGenderType
    gymId: ID
    searchText: String
    status: GlobalStatusType
}

input LanguageCountriessFilter {
    countryId: ID
    languageId: ID
    searchText: String
}

input LanguageFilter {
    searchText: String
    status: String
}

input LanguageInput {
    code: String!
    id: ID
    name: String!
    status: StatusType!
}

input MembershipCategoryFilter {
    searchText: String
    status: GlobalStatusType
}

input MembershipInvoiceInput {
    membershipId: ID!
}

input MembershipScheduleInput {
    closeAllDay: Boolean
    day: Int!
    duration: Float
    openTime: LocalTime
}

input MembershipSubCategoryFilter {
    membershipCategoryId: ID
    searchText: String
    status: GlobalStatusType
}

input MembershipsFilter {
    accessType: MembershipAccessType
    countryId: ID
    isWeekelyScheduled: Boolean
    lifetime: Boolean
    membershipCategoryId: ID
    membershipSubCategoryId: ID
    referenceTypeId: ID
    searchText: String
    status: GlobalStatusType
}

"Paginator"
input PaginatorInput {
    limit: Int!
    page: Int!
}

input PassCategoryFilter {
    searchText: String
    status: GlobalStatusType
}

input PassInvoiceInput {
    passId: ID!
}

input PassScheduleInput {
    closeAllDay: Boolean
    day: Int!
    duration: Float
    openTime: LocalTime
}

input PassesFilter {
    accessType: PassAccessType
    countryId: ID
    passCategoryId: ID
    referenceTypeId: ID
    searchText: String
    status: GlobalStatusType
    type: PassType
}

input PermissionsFilter {
    searchText: String
    status: StatusType
}

input ProductCategoriesFilter {
    searchText: String
    status: GlobalStatusType
}

input ProductInvoiceInput {
    productId: ID!
}

input ProductStocksFilter {
    gymId: ID
    productId: ID
    searchText: String
}

input ProductsFilter {
    bestSeller: GlobalStatusType
    brandId: ID
    categoryId: ID
    countryId: ID
    searchText: String
    status: GlobalStatusType
}

input RegisterCustomerInput {
    authId: String
    contactNumber: String!
    countryId: ID!
    email: String!
    firstName: String!
    gender: GlobalGenderType
    isEmailVerified: Boolean
    isPhoneVerified: Boolean!
    lastName: String
    password: String!
    photo: String
}

input RegisterInstructorInput {
    brandId: ID!
    contactNumber: String!
    email: String!
    firstName: String!
    gender: GlobalGenderType!
    gymId: ID!
    lastName: String
    photo: String
    status: GlobalStatusType!
}

input RolePermissionsFilter {
    permissionId: ID
    roleId: ID
    searchText: String
}

input RolesFilter {
    searchText: String
    status: StatusType
}

input SaveAdminInput {
    adminType: AdminType!
    contactNumber: String
    email: String!
    firstName: String!
    gender: GlobalGenderType
    id: ID
    lastName: String!
    overwrite: Boolean
    referenceTypeId: ID
    roles: [String!]
    status: GlobalStatusType!
}

input SaveBrandAdminInput {
    adminId: ID!
    brandId: ID!
    id: ID
}

input SaveBrandInput {
    adminIds: [ID!]
    city: String!
    countryId: ID!
    email: String!
    id: ID
    image: String
    legalName: String!
    logo: String!
    name: String!
    phone: String!
    state: String!
    status: BrandStatus!
    street: String!
    unitNumber: String!
    zipCode: String!
}

input SaveBrandStatusInput {
    id: ID!
    status: BrandStatus!
}

input SaveBrandsAdminsTableInput {
    adminId: ID!
}

input SaveContentElementInput {
    contentGroupId: ID!
    contentTypeId: ID!
    data: ContentElementDataInput
    id: ID
    options: [ContentElementDataOptionInput]
    reference: String!
    status: GlobalStatusType!
    type: ContentElementType!
}

input SaveContentElementValueInput {
    contentElementId: ID!
    customerId: ID!
    fieldValue: String!
    id: ID
}

input SaveContentGroupInput {
    contentTypeId: ID!
    description: String
    id: ID
    name: String!
    status: GlobalStatusType!
}

input SaveContentTypeInput {
    id: ID
    status: GlobalStatusType!
    type: ContentTypes!
}

input SaveCustomerInput {
    contactNumber: String!
    dob: Date
    email: String!
    firstName: String!
    gender: GlobalGenderType
    id: ID!
    lastName: String!
    photo: String
}

input SaveGymAdminInput {
    adminId: ID!
    gymId: ID!
    id: ID
}

input SaveGymClassCategoryInput {
    description: String
    id: ID
    image: String
    name: String!
    status: GlobalStatusType!
}

input SaveGymClassInput {
    age: AgeInput!
    amount: CurrencyValue!
    countryId: ID!
    description: String
    difficultyLevel: DifficultyLevel!
    duration: Float
    endDate: Date!
    estimatedCaloriesBurnt: String!
    gender: GlobalGenderType!
    gymClassCategoryId: ID!
    gymId: ID!
    id: ID
    images: [String!]
    instructorAuthId: ID
    instructorId: String
    isWeekelyScheduled: Boolean!
    name: String!
    openTime: LocalTime
    schedule: [GymClassScheduleInput!]
    spots: Int!
    spotsAlotted: Int
    startDate: Date!
    status: GlobalStatusType!
}

input SaveGymInput {
    address: addressInput!
    adminIds: [ID!]
    amenities: [String!]
    brandId: ID!
    description: String
    email: String!
    id: ID
    images: [String!]!
    legalName: String!
    name: String!
    phone: String!
    status: GymStatus!
}

input SaveGymOperatingHoursInput {
    closeAllDay: Boolean
    day: Int!
    openAllDay: Boolean
    openDuration: Int
    openTime: LocalTime
}

input SaveGymStatusInput {
    id: ID!
    status: GymStatus!
}

input SaveGymsAdminsTableInput {
    adminId: ID!
}

input SaveInstructorInput {
    brandId: ID!
    contactNumber: String!
    email: String!
    firstName: String!
    gender: GlobalGenderType
    gymId: ID!
    id: ID!
    lastName: String
    photo: String
    status: GlobalStatusType!
}

input SaveInstructorStatusInput {
    id: ID!
    status: GlobalStatusType!
}

input SaveLanguageCountryInput {
    countryId: ID!
    id: ID
    languageId: ID!
}

input SaveMembershipCategoryInput {
    description: String
    id: ID
    image: String
    name: String!
    status: GlobalStatusType!
}

input SaveMembershipInput {
    accessType: MembershipAccessType!
    age: AgeInput!
    allowedCheckins: Int
    amount: CurrencyValue!
    colorCode: String
    countryId: ID!
    description: String
    gender: GlobalGenderType!
    gracePeriod: Int
    id: ID
    image: String!
    isWeekelyScheduled: Boolean!
    lifetime: Boolean
    membershipCategoryId: ID!
    membershipSubCategoryId: ID
    name: String!
    period: Int
    referenceTypeId: ID!
    schedule: [MembershipScheduleInput!]
    status: GlobalStatusType!
}

input SaveMembershipSubCategoryInput {
    description: String
    id: ID
    image: String
    membershipCategoryId: ID!
    name: String!
    status: GlobalStatusType!
}

input SavePassCategoryInput {
    description: String
    id: ID
    image: String
    name: String!
    status: GlobalStatusType!
}

input SavePassInput {
    accessType: PassAccessType!
    age: AgeInput!
    allowedCheckins: Int!
    amount: Int!
    colorCode: String
    countryId: ID!
    description: String
    gender: GlobalGenderType!
    gracePeriod: Int!
    id: ID
    image: String!
    isWeekelyScheduled: Boolean!
    name: String!
    passCategoryId: ID
    period: Int!
    referenceTypeId: ID!
    schedule: [PassScheduleInput!]
    status: GlobalStatusType!
    type: PassType!
}

input SavePermissionInput {
    description: String
    id: ID
    name: String!
    status: StatusType!
}

input SaveProductCategoryInput {
    createdBy: ID
    id: ID
    image: String
    name: String!
    status: GlobalStatusType!
}

input SaveProductInput {
    barcode: String!
    bestSeller: GlobalStatusType
    brandId: ID!
    categoryId: ID!
    countryId: ID!
    description: String!
    express: Boolean!
    id: ID
    images: [String!]
    inventory: [SaveProductStockInProductInput!]
    listPrice: Float!
    name: String!
    returnPolicy: Boolean!
    returnPolicyDescription: String
    returnPolicyPeriod: Int
    salePrice: Float!
    sku: String!
    status: GlobalStatusType!
    warranty: Boolean!
    warrantyDescription: String
    warrantyPeriod: Int
}

input SaveProductStockInProductInput {
    gymId: ID!
    id: ID
    quantity: Int!
}

input SaveProductStockInput {
    gymId: ID!
    id: ID
    productId: ID!
    quantity: Int!
}

input SaveRoleInput {
    description: String
    id: ID
    name: String!
    permissions: [ID]
    status: StatusType!
}

input SaveStoreImageInput {
    id: ID
    image: String!
    status: GlobalStatusType!
}

input StoreHomeInput {
    bestSellers: Int!
    categories: Int!
    storeImages: Int!
    stores: Int!
}

input StoreImagesFilter {
    status: String
}

input addressInput {
    building: String
    city: String!
    countryId: ID!
    floorNo: String
    id: ID
    "The longitude component of the geo coordinates for this address, in degrees"
    latitude: Float!
    "The longitude component of the geo coordinates for this address, in degrees"
    longitude: Float!
    shortAddress: String
    state: String
    street: String
    unitNumber: String!
    zipCode: String!
}


"A day in format 'yyyy-mm-dd'"
scalar Date

"An iso 8601 date-time string"
scalar Datetime

"Scalar used to describe currency amounts. Serialized as a string to retain decimal precision."
scalar CurrencyValue

"An 24-hour time expressed as an hour/minute pair in local time, i.e. '18:00'"
scalar LocalTime