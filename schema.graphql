# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union MembershipRefTypePayload = ExternalBrand_VP | ExternalGym_VP

union PassRefTypePayload = ExternalBrand_VP | ExternalGym_VP

"Admins to manage brand, branches, admin platform.."
type Admin {
    authId: String!
    brands: [Brand]
    contactNumber: String
    createdAt: Datetime!
    createdBy: Admin
    email: String!
    firstName: String!
    fullName: String!
    id: ID!
    lastName: String
    lastUpdatedBy: Admin
    status: GlobalStatusType!
    updatedAt: Datetime!
}

type AdminPassword {
    hash: String!
    string: String!
}

type AdminsPayload {
    list: [Admin]
    paging: PaginatorOutput
}

type Age {
    from: Int!
    to: Int!
}

type Amenity {
    id: ID!
    name: String!
    status: StatusType!
}

"Brands/Gyms"
type Brand {
    admins: [Admin]
    city: String!
    country: Country!
    countryId: ID!
    createdAt: Datetime!
    createdBy: Admin!
    email: String!
    gymCount: Int!
    id: ID!
    lastUpdatedBy: Admin!
    legalName: String!
    logo: String!
    name: String!
    phone: String!
    state: String!
    status: BrandStatus!
    street: String!
    unitNumber: String!
    updatedAt: Datetime!
    zipCode: String!
}

"BrandAdmin"
type BrandAdmin {
    admin: Admin!
    brand: Brand!
    createdAt: Datetime!
    createdBy: Admin!
    id: ID!
    lastUpdatedBy: Admin!
    updatedAt: Datetime!
}

type BrandAdminsPayload {
    list: [BrandAdmin]
    paging: PaginatorOutput
}

type BrandsPayload {
    list: [Brand]
    paging: PaginatorOutput
}

type BuyAPassPayload {
    error: OrderPassError
    errorMessage: String
    errors: [OrderPassError!]
    orderPass: OrderPass
}

type ContentElement {
    contentGroup: ContentGroup!
    contentType: ContentType!
    createdAt: Datetime!
    createdById: ID!
    data: ContentElementData
    id: ID!
    lastUpdatedById: ID!
    orderNo: Int!
    reference: String!
    status: GlobalStatusType!
    type: ContentElementType!
    updatedAt: Datetime!
}

type ContentElementData {
    description: String
    name: String!
    options: [ContentElementDataOption]
    placeHolder: String
    required: Boolean!
    value: String
}

type ContentElementDataOption {
    id: String!
    label: String!
}

type ContentElementValue {
    contentElement: ContentElement
    contentGroup: ContentGroup
    contentType: ContentType
    createdAt: Datetime!
    createdById: ID
    customer: Customer!
    data: ContentElementData
    fieldValue: String!
    id: ID!
    lastUpdatedById: ID
    orderNo: Int!
    reference: String!
    status: GlobalStatusType!
    type: ContentElementType!
    updatedAt: Datetime!
}

type ContentElementValuesPayload {
    list: [ContentElementValue]
    paging: PaginatorOutput
}

type ContentElementsPayload {
    list: [ContentElement]
    paging: PaginatorOutput
}

type ContentGroup {
    contentElements: [ContentElement]
    contentType: ContentType!
    createdAt: Datetime!
    createdById: ID!
    description: String
    id: ID!
    lastUpdatedById: ID!
    name: String!
    orderNo: Int!
    status: GlobalStatusType!
    updatedAt: Datetime!
}

type ContentGroupsPayload {
    list: [ContentGroup]
    paging: PaginatorOutput
}

type ContentType {
    contentElements: [ContentElement]
    contentGroups: [ContentGroup]
    createdAt: Datetime!
    createdById: ID!
    id: ID!
    lastUpdatedById: ID!
    status: GlobalStatusType!
    type: ContentTypes!
    updatedAt: Datetime!
}

type ContentTypesPayload {
    list: [ContentType]
    paging: PaginatorOutput
}

type CountriesPayload {
    list: [Country]
    paging: PaginatorOutput
}

type Country {
    currency: CurrencyDetails!
    dialCode: String
    flagPhoto: String
    id: ID!
    isoCode: String
    languages: [Language]!
    name: String!
    servicePhoneNumber: String
    status: StatusType
    timeZoneIdentifier: String
    vat: Float!
    vatId: String
}

type CurrenciesPayload {
    list: [Currency]
    paging: PaginatorOutput
}

type Currency {
    code: String!
    decimalPlace: Int
    id: ID!
    lowestDenomination: Float!
    name: String!
    status: StatusType!
    subUnitName: String!
}

type CurrencyDetails {
    code: String!
    decimalPlace: Int!
    lowestDenomination: Float!
    name: String!
    subUnitName: String!
    symbol: String
}

"Customer/Users..."
type Customer {
    authId: String!
    contactNumber: String
    country: Country!
    countryId: ID!
    createdAt: Datetime!
    dob: Date
    email: String!
    firstName: String!
    fullName: String!
    gender: GlobalGenderType!
    id: ID!
    isEmailVerified: Boolean!
    isPhoneVerified: Boolean!
    lastName: String
    photo: String
    status: GlobalStatusType!
    updatedAt: Datetime!
}

type CustomerMedicalFormPayload {
    error: CustomerError
    errorMessage: String
    errors: [CustomerError!]
    medicalForm: [ContentElementValue]
}

type CustomersPayload {
    list: [Customer]
    paging: PaginatorOutput
}

type ExternalBrand_VP {
    countryId: ID!
    email: String!
    id: ID!
    legalName: String
    logo: String!
    name: String!
    phone: String!
    status: GlobalStatusType!
}

type ExternalGym_VP {
    brandId: ID!
    email: String!
    id: ID!
    legalName: String
    logo: String!
    name: String!
    phone: String!
    status: GlobalStatusType!
}

type ExternalInstructor_VP {
    contactNumber: String!
    email: String!
    firstName: String!
    id: ID!
    lastName: String
    photo: String
    status: GlobalStatusType!
}

"Gyms"
type Gym {
    address: GymAddress!
    admins: [Admin]
    amenities: [String!]
    brand: Brand!
    createdAt: Datetime!
    createdBy: Admin!
    distance: Float
    email: String!
    id: ID!
    images: [String!]!
    lastUpdatedBy: Admin!
    legalName: String!
    name: String!
    operatingHours: [GymOperatingHours]
    phone: String!
    status: GymStatus!
    updatedAt: Datetime!
}

"Gym Address"
type GymAddress {
    building: String
    city: String!
    country: Country!
    countryId: ID!
    createdAt: Datetime!
    floorNo: String
    geoLocation: GymAddressGeoLocation!
    gym: Gym!
    id: ID!
    "The longitude component of the geo coordinates for this address, in degrees"
    latitude: Float!
    "The longitude component of the geo coordinates for this address, in degrees"
    longitude: Float!
    shortAddress: String
    state: String
    street: String
    unitNumber: String
    updatedAt: Datetime!
    zipCode: String
}

type GymAddressGeoLocation {
    coordinates: [Float]
    type: String
}

type GymClass {
    age: Age
    amount: CurrencyValue!
    brand: ExternalBrand_VP!
    countryId: ID!
    createdAt: Datetime!
    createdById: ID!
    description: String
    difficultyLevel: DifficultyLevel!
    duration: Float
    endDate: Date
    estimatedCaloriesBurnt: String!
    gender: GlobalGenderType!
    gym: ExternalGym_VP!
    gymClassCategory: GymClassCategory!
    id: ID!
    images: [String!]
    instructor: ExternalInstructor_VP
    isWeekelyScheduled: Boolean!
    lastUpdatedById: ID!
    name: String!
    openTime: LocalTime
    schedule: [GymClassWeeklySchedule!]
    spots: Int!
    spotsAlotted: Int
    startDate: Date!
    status: GlobalStatusType
    updatedAt: Datetime!
}

type GymClassCategory {
    brand: ExternalBrand_VP!
    createdAt: Datetime!
    description: String
    gym: ExternalGym_VP!
    id: ID!
    image: String
    name: String!
    status: GlobalStatusType
    updatedAt: Datetime!
}

type GymClassCategoryPayload {
    list: [GymClassCategory]
    paging: PaginatorOutput
}

type GymClassWeeklySchedule {
    closeAllDay: Boolean!
    createdAt: Datetime!
    day: Int!
    duration: Float
    id: ID!
    instructor: ExternalInstructor_VP
    openTime: LocalTime
    updatedAt: Datetime!
}

type GymClassesPayload {
    list: [GymClass]
    paging: PaginatorOutput
}

"Gym Operating Hours"
type GymOperatingHours {
    closeAllDay: Boolean!
    createdAt: Datetime!
    createdBy: Admin!
    day: Int!
    id: ID!
    lastUpdatedBy: Admin!
    openAllDay: Boolean!
    openDuration: Int
    openTime: LocalTime
    updatedAt: Datetime!
}

type GymsPayload {
    list: [Gym]
    paging: PaginatorOutput
}

"Instructor/Users"
type Instructor {
    authId: String!
    brand: Brand!
    contactNumber: String
    createdAt: Datetime!
    email: String!
    firstName: String!
    gender: GlobalGenderType!
    id: ID
    lastName: String
    photo: String
    status: GlobalStatusType!
    updatedAt: Datetime!
}

type InstructorsPayload {
    list: [Instructor]
    paging: PaginatorOutput
}

type Language {
    code: String!
    countries: [Country]!
    id: ID!
    name: String!
    status: StatusType!
}

type LanguageCountriessPayload {
    list: [LanguageCountry]
    paging: PaginatorOutput
}

type LanguageCountry {
    country: Country!
    createdAt: Datetime!
    id: ID!
    language: Language!
    updatedAt: Datetime!
}

type LanguagesPayload {
    list: [Language]
    paging: PaginatorOutput
}

"Membership.."
type Membership {
    accessType: MembershipAccessType!
    age: Age
    allowedCheckins: Int
    amount: CurrencyValue!
    countryId: ID!
    createdAt: Datetime!
    createdById: ID!
    description: String
    gender: GlobalGenderType!
    gracePeriod: Int
    id: ID!
    image: String
    isWeekelyScheduled: Boolean!
    lastUpdatedById: ID!
    lifetime: Boolean
    membershipCategory: MembershipCategory!
    membershipSubCategory: MembershipSubCategory!
    name: String!
    period: Int
    referenceType: MembershipRefTypePayload
    status: GlobalStatusType!
    updatedAt: Datetime!
}

type MembershipCategory {
    accessType: MembershipAccessType!
    createdAt: Datetime!
    description: String
    id: ID!
    image: String
    name: String!
    referenceType: MembershipRefTypePayload
    status: GlobalStatusType
    subCategories: [MembershipSubCategory!]
    updatedAt: Datetime!
}

type MembershipCategoryPayload {
    list: [MembershipCategory]
    paging: PaginatorOutput
}

type MembershipSubCategory {
    createdAt: Datetime!
    description: String
    id: ID!
    image: String
    membershipCategory: MembershipCategory!
    name: String!
    status: GlobalStatusType
    updatedAt: Datetime!
}

type MembershipSubCategoryPayload {
    list: [MembershipSubCategory]
    paging: PaginatorOutput
}

type MembershipsPayload {
    list: [Membership]
    paging: PaginatorOutput
}

type Mutation {
    amenityUpsert(input: AmenityInput!): SaveAmenityPayload
    buyAPass(input: BuyAPassInput!): BuyAPassPayload
    countryUpsert(input: CountryInput!): SaveCountryPayload
    currencyUpsert(input: CurrencyInput!): SaveCurrencyPayload
    languageUpsert(input: LanguageInput!): SaveLanguagePayload
    registerCustomer(input: RegisterCustomerInput!): RegisterCustomerPayload
    registerInstructor(input: RegisterInstructorInput!): RegisterInstructorPayload
    saveAdmin(input: SaveAdminInput!): SaveAdminPayload
    saveBrand(input: SaveBrandInput!): SaveBrandPayload
    saveBrandAdmin(input: SaveBrandAdminInput!): SaveBrandAdminPayload
    saveBrandStatusUpdate(input: SaveBrandStatusInput!): SaveBrandPayload
    saveBrandsAdminsTable(brandId: ID!, input: [SaveBrandsAdminsTableInput]): SaveBrandAdminTablePayload
    saveContentElement(input: SaveContentElementInput!): SaveContentElementPayload
    saveContentElementValue(input: SaveContentElementValueInput!): SaveContentElementValuePayload
    saveContentGroup(input: SaveContentGroupInput!): SaveContentGroupPayload
    saveContentType(input: SaveContentTypeInput!): SaveContentTypePayload
    saveCustomer(input: SaveCustomerInput!): SaveCustomerPayload
    saveCustomerMedicalForm(input: CustomerMedicalForm!): CustomerMedicalFormPayload
    saveCustomerPhoto(input: CustomerPhotoInput!): RegisterCustomerPayload
    saveGym(input: SaveGymInput!): SaveGymPayload
    saveGymClass(input: SaveGymClassInput!): SaveGymClassPayload
    saveGymClassCategory(input: SaveGymClassCategoryInput!): SaveGymClassCategoryPayload
    saveGymOperatingHours(gymId: ID!, input: [SaveGymOperatingHoursInput!]!): SaveGymOperatingHoursPayload
    saveGymStatusUpdate(input: SaveGymStatusInput!): SaveGymPayload
    saveInstructor(input: SaveInstructorInput!): SaveInstructorPayload
    saveInstructorStatusUpdate(input: SaveInstructorStatusInput!): SaveInstructorPayload
    saveLanguageCountry(input: SaveLanguageCountryInput!): SaveLanguageCountryPayload
    saveMembership(input: SaveMembershipInput!): SaveMembershipPayload
    saveMembershipCategory(input: SaveMembershipCategoryInput!): SaveMembershipCategoryPayload
    saveMembershipSubCategory(input: SaveMembershipSubCategoryInput!): SaveMembershipSubCategoryPayload
    savePass(input: SavePassInput!): SavePassPayload
    savePermission(input: SavePermissionInput!): SavePermissionPayload
    saveRole(input: SaveRoleInput!): SaveRolePayload
    saveRolePermission(input: SaveRolePermissionInput!): SaveRolePermissionPayload
    saveRolesPermissionsTable(input: [SaveRolesPermissionsTableInput]): SaveRolePermissionTablePayload
    sortContentElement(contentTypeId: ID!, ids: [ID!]!): Boolean
    sortContentGroup(contentTypeId: ID!, ids: [ID!]!): Boolean
}

"Passes bought by customers"
type OrderPass {
    allowedCheckins: Int
    amount: CurrencyValue
    countryId: ID!
    createdAt: Datetime!
    customerId: ID!
    gracePeriod: Int
    gymId: ID!
    id: ID!
    passId: ID!
    paymentStatus: PaymentStatus!
    period: Int
    shortCode: String!
    status: PassStatus!
    updatedAt: Datetime!
}

type PaginatorOutput {
    limit: Int!
    page: Int!
    totalPages: Int!
}

type Pass {
    accessType: PassAccessType!
    age: Age
    allowedCheckins: Int!
    amount: CurrencyValue!
    createdAt: Datetime!
    createdById: ID!
    gender: GlobalGenderType!
    gracePeriod: Int!
    id: ID!
    lastUpdatedById: ID!
    name: String!
    period: Int!
    photo: String!
    referenceType: PassRefTypePayload
    status: GlobalStatusType
    type: PassType!
    updatedAt: Datetime!
}

type PassesPayload {
    list: [Pass]
    paging: PaginatorOutput
}

"Permission"
type Permission {
    createdAt: Datetime!
    createdBy: Admin!
    description: String
    id: ID!
    lastUpdatedBy: Admin!
    name: String!
    roles: [Role]
    status: GlobalStatusType!
    updatedAt: Datetime!
}

type PermissionsPayload {
    list: [Permission]
    paging: PaginatorOutput
}

type Query {
    admin(id: ID!): Admin
    adminByEmail(email: String!): Admin
    admins(paging: PaginatorInput!, params: AdminsFilter): AdminsPayload!
    amenities(filter: AmenityFilter): [Amenity]
    brand(id: ID!): Brand!
    brandAdmin(id: ID!): BrandAdmin
    brandAdmins(paging: PaginatorInput!, params: BrandAdminsFilter): BrandAdminsPayload!
    brands(paging: PaginatorInput, params: BrandsFilter): BrandsPayload!
    contentElement(id: ID!): ContentElement
    contentElementValue(id: ID!): ContentElementValue
    contentElementValues(paging: PaginatorInput!, params: ContentElementValuesFilter): ContentElementValuesPayload
    contentElements(paging: PaginatorInput!, params: ContentElementsFilter): ContentElementsPayload
    contentGroup(id: ID!): ContentGroup
    contentGroups(paging: PaginatorInput!, params: ContentGroupsFilter): ContentGroupsPayload
    contentType(id: ID!): ContentType
    contentTypes(paging: PaginatorInput!, params: ContentTypesFilter): ContentTypesPayload
    countries(filter: CountryFilter, paging: PaginatorInput): CountriesPayload!
    countriesById(ids: [ID!]!): [Country!]!
    country(id: ID!): Country!
    currencies(filter: CurrencyFilter, paging: PaginatorInput!): CurrenciesPayload!
    currency(id: ID!): Currency!
    customer(id: ID!): Customer
    customerByEmail(email: String!): Customer
    customers(paging: PaginatorInput!, params: CustomersFilter): CustomersPayload!
    getMedicalForm: [ContentGroup!]!
    gym(id: ID!): Gym!
    gymAddress(gymId: ID!): GymAddress
    gymClass(id: ID!): GymClass!
    gymClassCategories(paging: PaginatorInput, params: GymClassCategoryFilter): GymClassCategoryPayload!
    gymClassCategory(id: ID!): GymClassCategory!
    gymClassSechedule(gymClassId: ID!): [GymClassWeeklySchedule!]
    gymClasses(paging: PaginatorInput, params: GymClassesFilter): GymClassesPayload!
    gymOperatingHours(gymId: ID!): [GymOperatingHours]
    gyms(paging: PaginatorInput!, params: GymsFilter): GymsPayload!
    gymsInRadius(paging: PaginatorInput!, params: GymsInRadiusFilter): GymsPayload!
    instructor(id: ID!): Instructor
    instructorByEmail(email: String!): Instructor
    instructors(paging: PaginatorInput, params: InstructorsFilter): InstructorsPayload!
    language(id: ID!): Language!
    languageCountries(filter: LanguageCountriessFilter, paging: PaginatorInput!): LanguageCountriessPayload!
    languageCountry(id: ID!): LanguageCountry
    languages(filter: LanguageFilter, paging: PaginatorInput!): LanguagesPayload!
    membership(id: ID!): Membership!
    membershipCategories(paging: PaginatorInput, params: MembershipCategoryFilter): MembershipCategoryPayload!
    membershipCategory(id: ID!): MembershipCategory!
    membershipSubCategories(paging: PaginatorInput, params: MembershipSubCategoryFilter): MembershipSubCategoryPayload!
    membershipSubCategory(id: ID!): MembershipSubCategory!
    memberships(paging: PaginatorInput, params: MembershipsFilter): MembershipsPayload!
    pass(id: ID!): Pass!
    passes(paging: PaginatorInput, params: PassesFilter): PassesPayload!
    permission(id: ID!): Permission
    permissions(paging: PaginatorInput!, params: PermissionsFilter): PermissionsPayload!
    role(id: ID!): Role
    rolePermission(id: ID!): RolePermission
    rolePermissions(paging: PaginatorInput!, params: RolePermissionsFilter): RolePermissionsPayload!
    roles(paging: PaginatorInput!, params: RolesFilter): RolesPayload!
}

type RegisterCustomerPayload {
    customer: Customer
    error: CustomerError
    errorMessage: String
    errors: [CustomerError!]
}

type RegisterInstructorPayload {
    error: InstructorError
    errorMessage: String
    errors: [InstructorError!]
    instructor: Instructor
    password: String
}

"Role"
type Role {
    createdAt: Datetime!
    createdBy: Admin!
    description: String
    id: ID!
    lastUpdatedBy: Admin!
    name: String!
    permissions: [Permission]
    status: GlobalStatusType!
    updatedAt: Datetime!
}

"RolePermission"
type RolePermission {
    createdAt: Datetime!
    createdBy: Admin!
    id: ID!
    lastUpdatedBy: Admin!
    permission: Permission!
    role: Role!
    updatedAt: Datetime!
}

type RolePermissionsPayload {
    list: [RolePermission]
    paging: PaginatorOutput
}

type RolesPayload {
    list: [Role]
    paging: PaginatorOutput
}

type SaveAdminPayload {
    admin: Admin
    error: AdminError
    errorMessage: String
    errors: [AdminError!]
    password: AdminPassword
}

type SaveAmenityPayload {
    amenity: Amenity
    error: AmenityError
    errors: [AmenityError!]
}

type SaveBrandAdminPayload {
    brandAdmin: BrandAdmin
    error: BrandAdminError
    errors: [BrandAdminError!]
}

type SaveBrandAdminTablePayload {
    error: BrandAdminError
    errors: [BrandAdminError!]
    updated: Boolean
}

type SaveBrandPayload {
    brand: Brand
    error: BrandError
    errors: [BrandError!]
}

type SaveContentElementPayload {
    contentElement: ContentElement
    error: ContentElementError
    errors: [ContentElementError!]
}

type SaveContentElementValuePayload {
    contentElementValue: ContentElementValue
    error: ContentElementValueError
    errors: [ContentElementValueError!]
}

type SaveContentGroupPayload {
    contentGroup: ContentGroup
    error: ContentGroupError
    errors: [ContentGroupError!]
}

type SaveContentTypePayload {
    contentType: ContentType
    error: ContentTypeError
    errors: [ContentTypeError!]
}

type SaveCountryPayload {
    country: Country
    error: CountryError
    errors: [CountryError!]
}

type SaveCurrencyPayload {
    currency: Currency
    error: CurrencyError
    errors: [CurrencyError!]
}

type SaveCustomerPayload {
    customer: Customer
    error: CustomerError
    errorMessage: String
    errors: [CustomerError!]
}

type SaveGymClassCategoryPayload {
    error: GymClassCategoryError
    errorMessage: String
    errors: [GymClassCategoryError!]
    gymClassCategory: GymClassCategory
}

type SaveGymClassPayload {
    error: GymClassError
    errors: [GymClassError!]
    gymClass: GymClass
}

type SaveGymOperatingHoursPayload {
    error: GymOperatingHoursError
    errors: [GymOperatingHoursError!]
    updated: Boolean
}

type SaveGymPayload {
    error: GymError
    errorMessage: String
    errors: [GymError!]
    gym: Gym
}

type SaveInstructorPayload {
    error: InstructorError
    errorMessage: String
    errors: [InstructorError!]
    instructor: Instructor
}

type SaveLanguageCountryPayload {
    error: LanguageCountryError
    errors: [LanguageCountryError!]
    languageCountry: LanguageCountry
}

type SaveLanguagePayload {
    error: LanguageError
    errors: [LanguageError!]
    language: Language
}

type SaveMembershipCategoryPayload {
    error: MembershipCategoryError
    errorMessage: String
    errors: [MembershipCategoryError!]
    membershipCategory: MembershipCategory
}

type SaveMembershipPayload {
    error: MembershipError
    errors: [MembershipError!]
    memebership: Membership
}

type SaveMembershipSubCategoryPayload {
    error: MembershipSubCategoryError
    errorMessage: String
    errors: [MembershipSubCategoryError!]
    membershipSubCategory: MembershipSubCategory
}

type SavePassPayload {
    error: MembershipError
    errors: [MembershipError!]
    pass: Pass
}

type SavePermissionPayload {
    error: PermissionError
    errors: [PermissionError!]
    permission: Permission
}

type SaveRolePayload {
    error: RoleError
    errors: [RoleError!]
    role: Role
}

type SaveRolePermissionPayload {
    error: RolePermissionError
    errors: [RolePermissionError!]
    rolePermission: RolePermission
}

type SaveRolePermissionTablePayload {
    error: RolePermissionError
    errors: [RolePermissionError!]
    rolesPermissions: [RolePermission]
}

enum AdminError {
    DUPLICATE_CONTACT_NUMBER
    DUPLICATE_EMAIL
    FIREBASE
    INVALID_ID
}

enum AmenityError {
    DUPLICATE_NAME
    INVALID_ID
}

enum BrandAdminError {
    DUPLICATE_ADMIN
    INVALID_BRAND
    INVALID_ID
}

enum BrandError {
    DUPLICATE_NAME
    INVALID_ID
}

enum BrandStatus {
    ACTIVE
    INACTIVE
}

enum ContentElementError {
    DUPLICATE_REFERENCE
    INVALID_DATA
    INVALID_ID
}

enum ContentElementType {
    BUTTON
    CHECKBOX
    DATE
    DROPDOWN
    RADIO
    TEXTAREA
    TEXTBOX
}

enum ContentElementValueError {
    DUPLICATE_FIELD
    INVALID_CONTENT_ELEMENT_ID
    INVALID_ID
}

enum ContentGroupError {
    DUPLICATE_NAME
    INVALID_DATA
    INVALID_ID
}

enum ContentTypeError {
    DUPLICATE_TYPE
    INVALID_ID
}

enum ContentTypes {
    MEDICAL_ID
}

enum CountryError {
    DUPLICATE_NAME
    INVALID_ID
}

enum CurrencyError {
    DUPLICATE_NAME
    INVALID_ID
}

enum CustomerError {
    DUPLICATE_CONTACT_NUMBER
    DUPLICATE_EMAIL
    FIELD_REQUIRED
    FIREBASE
    INVALID_CUSTOMER
    INVALID_FIELD_DATA
    INVALID_ID
}

enum DifficultyLevel {
    ADVANCE
    BEGINNER
    INTERMEDIATE
}

enum GlobalGenderType {
    ANY
    FEMALE
    MALE
}

enum GlobalStatusType {
    ACTIVE
    INACTIVE
}

enum GymClassCategoryError {
    DUPLICATE_NAME
    INVALID_GYM_ID
    INVALID_ID
}

enum GymClassError {
    DUPLICATE_NAME
    DURATION_REQUIRED
    INSTRUCTOR_REQUIRED
    INVALID_BRAND_ID
    INVALID_CATEGORY_ID
    INVALID_DATE_RANGE
    INVALID_GYM_ID
    INVALID_ID
    INVALID_INSTRUCTOR_ID
    INVALID_SCHEDULE
    OPEN_TIME_REQUIRED
    SECHEDULE_REQUIRED
}

enum GymError {
    DUPLICATE_NAME
    INVALID_ID
}

enum GymOperatingHoursError {
    DUPLICATE_DAY
    INVALID_DAY
    INVALID_GYM
    INVALID_ID
}

enum GymStatus {
    ACTIVE
    INACTIVE
}

enum InstructorError {
    DUPLICATE_CONTACT_NUMBER
    DUPLICATE_EMAIL
    FIELD_REQUIRED
    FIREBASE
    INVALID_FIELD_DATA
    INVALID_ID
    INVALID_INSTRUCTOR
}

enum LanguageCountryError {
    DUPLICATE_PERMISSION
    INVALID_ID
}

enum LanguageError {
    DUPLICATE_NAME
    INVALID_ID
}

enum MembershipAccessType {
    BRANCH
    BRAND
}

enum MembershipCategoryError {
    DUPLICATE_NAME
    INVALID_BRAND_ID
    INVALID_GYM_ID
    INVALID_ID
}

enum MembershipError {
    DUPLICATE_NAME
    INVALID_CATEGORY_ID
    INVALID_ID
    INVALID_SUB_CATEGORY_ID
}

enum MembershipSubCategoryError {
    DUPLICATE_NAME
    INVALID_CATEGORY_ID
    INVALID_ID
}

enum OrderPassError {
    INVALID_PASS_ID
}

enum PassAccessType {
    BRANCH
    BRAND
}

enum PassStatus {
    ACTIVE
    CANCELED
    INACTIVE
}

enum PassType {
    ALL
    EVENING
    MORNING
    RUSH
}

enum PaymentStatus {
    FAILURE
    PENDING
    SUCCESS
}

enum PermissionError {
    DUPLICATE_NAME
    INVALID_ID
    INVALID_ROLE
}

enum RoleError {
    DUPLICATE_NAME
    INVALID_ID
}

enum RolePermissionError {
    DUPLICATE_PERMISSION
    INVALID_ID
}

enum StatusType {
    ACTIVE
    DELETED
    INACTIVE
}

input AdminsFilter {
    searchText: String
    status: GlobalStatusType
}

input AgeInput {
    from: Int!
    to: Int!
}

input AmenityFilter {
    status: String
}

input AmenityInput {
    id: ID
    name: String!
    status: StatusType!
}

input BrandAdminsFilter {
    adminId: ID
    brandId: ID
    searchText: String
}

input BrandsFilter {
    countryId: ID
    searchText: String
    status: BrandStatus
}

input BuyAPassInput {
    customerId: ID!
    passId: ID!
}

input ContentElementDataInput {
    description: String
    name: String!
    options: [ContentElementDataOptionInput]
    placeHolder: String
    required: Boolean!
    value: String
}

input ContentElementDataOptionInput {
    id: String!
    label: String!
}

input ContentElementValuesFilter {
    contentElementId: ID
    contentGroupId: ID
    contentTypeId: ID
    customerId: ID
    fieldValue: String
    reference: String
    searchText: String
    status: GlobalStatusType
    type: ContentElementType
}

input ContentElementsFilter {
    contentGroupId: ID
    contentTypeId: ID
    reference: String
    searchText: String
    status: GlobalStatusType
    type: ContentElementType
}

input ContentGroupsFilter {
    contentTypeId: ID
    searchText: String
    status: GlobalStatusType
}

input ContentTypesFilter {
    searchText: String
    status: GlobalStatusType
    type: ContentTypes
}

input CountryFilter {
    searchText: String
    status: String
}

input CountryInput {
    currency: CurrencyDetailsInput
    dialCode: String!
    flagPhoto: String
    id: ID
    isoCode: String!
    name: String!
    servicePhoneNumber: String!
    status: StatusType!
    timeZoneIdentifier: String!
    vat: Float!
    vatId: String
}

input CurrencyDetailsInput {
    code: String!
    decimalPlace: Int!
    lowestDenomination: Float!
    name: String!
    subUnitName: String!
    symbol: String!
}

input CurrencyFilter {
    searchText: String
    status: String
}

input CurrencyInput {
    code: String!
    decimalPlace: Int!
    id: ID
    lowestDenomination: Float!
    name: String!
    status: StatusType!
    subUnitName: String!
}

input CustomerMedicalForm {
    contentElements: [CustomerMedicalFormField]
    customerId: ID!
}

input CustomerMedicalFormField {
    contentElementId: ID!
    fieldValue: String!
}

input CustomerPhotoInput {
    id: ID!
    photo: String!
}

input CustomersFilter {
    gender: GlobalGenderType
    searchText: String
    status: GlobalStatusType
}

"A set of GIS co-ordinates"
input GISLocationInput {
    "Latitude, in degrees"
    latitude: Float!
    "Longitude, in degrees"
    longitude: Float!
}

input GymClassCategoryFilter {
    brandId: ID
    gymId: ID
    searchText: String
    status: GlobalStatusType
}

input GymClassScheduleInput {
    closeAllDay: Boolean
    day: Int!
    duration: Float
    instructorId: ID
    openTime: LocalTime
}

input GymClassesFilter {
    available: Boolean
    brandId: ID
    countryId: ID
    difficultyLevel: DifficultyLevel
    forDate: Date
    gymClassCategoryId: ID
    gymId: ID
    searchText: String
    status: GlobalStatusType
}

input GymsFilter {
    brandId: ID
    countryId: ID
    searchText: String
    status: GymStatus
}

input GymsInRadiusFilter {
    brandIds: [ID!]
    "User's current location"
    location: GISLocationInput!
    "Search Radius"
    radius: Float!
}

input InstructorsFilter {
    gender: GlobalGenderType
    searchText: String
    status: GlobalStatusType
}

input LanguageCountriessFilter {
    countryId: ID
    languageId: ID
    searchText: String
}

input LanguageFilter {
    searchText: String
    status: String
}

input LanguageInput {
    code: String!
    id: ID
    name: String!
    status: StatusType!
}

input MembershipCategoryFilter {
    accessType: MembershipAccessType
    referenceTypeId: ID
    searchText: String
    status: GlobalStatusType
}

input MembershipSubCategoryFilter {
    membershipCategoryId: ID
    searchText: String
    status: GlobalStatusType
}

input MembershipsFilter {
    countryId: ID
    isWeekelyScheduled: Boolean
    lifetime: Boolean
    membershipCategoryId: ID
    membershipSubCategoryId: ID
    referenceTypeId: ID
    searchText: String
    status: GlobalStatusType
    type: MembershipAccessType
}

"Paginator"
input PaginatorInput {
    limit: Int!
    page: Int!
}

input PassesFilter {
    accessType: PassAccessType
    referenceTypeId: ID
    searchText: String
    status: GlobalStatusType
}

input PermissionsFilter {
    searchText: String
    status: GlobalStatusType
}

input RegisterCustomerInput {
    contactNumber: String!
    countryId: ID!
    email: String!
    firstName: String!
    gender: GlobalGenderType
    isEmailVerified: Boolean
    isPhoneVerified: Boolean!
    lastName: String
    password: String!
    photo: String
}

input RegisterInstructorInput {
    brandId: ID!
    contactNumber: String!
    email: String!
    firstName: String!
    gender: GlobalGenderType!
    lastName: String
    photo: String
    status: GlobalStatusType!
}

input RolePermissionsFilter {
    permissionId: ID
    roleId: ID
    searchText: String
}

input RolesFilter {
    searchText: String
    status: GlobalStatusType
}

input SaveAdminInput {
    contactNumber: String
    email: String!
    firstName: String!
    id: ID
    lastName: String!
    overwrite: Boolean
    status: GlobalStatusType!
}

input SaveBrandAdminInput {
    adminId: ID!
    brandId: ID!
    id: ID
}

input SaveBrandInput {
    city: String!
    countryId: ID!
    email: String!
    id: ID
    legalName: String!
    logo: String!
    name: String!
    phone: String!
    state: String!
    status: BrandStatus!
    street: String!
    unitNumber: String!
    zipCode: String!
}

input SaveBrandStatusInput {
    id: ID!
    status: BrandStatus!
}

input SaveBrandsAdminsTableInput {
    adminId: ID!
}

input SaveContentElementInput {
    contentGroupId: ID!
    contentTypeId: ID!
    data: ContentElementDataInput
    id: ID
    options: [ContentElementDataOptionInput]
    reference: String!
    status: GlobalStatusType!
    type: ContentElementType!
}

input SaveContentElementValueInput {
    contentElementId: ID!
    customerId: ID!
    fieldValue: String!
    id: ID
}

input SaveContentGroupInput {
    contentTypeId: ID!
    description: String
    id: ID
    name: String!
    status: GlobalStatusType!
}

input SaveContentTypeInput {
    id: ID
    status: GlobalStatusType!
    type: ContentTypes!
}

input SaveCustomerInput {
    contactNumber: String!
    dob: Date
    email: String!
    firstName: String!
    gender: GlobalGenderType
    id: ID!
    lastName: String
    photo: String
}

input SaveGymClassCategoryInput {
    description: String
    gymId: ID!
    id: ID
    image: String
    name: String!
    status: GlobalStatusType!
}

input SaveGymClassInput {
    age: AgeInput!
    amount: CurrencyValue!
    countryId: ID!
    description: String
    difficultyLevel: DifficultyLevel!
    duration: Float
    endDate: Date!
    estimatedCaloriesBurnt: String!
    gender: GlobalGenderType!
    gymClassCategoryId: ID!
    gymId: ID!
    id: ID
    images: [String!]
    instructorId: ID
    isWeekelyScheduled: Boolean!
    name: String!
    openTime: LocalTime
    schedule: [GymClassScheduleInput!]
    spots: Int!
    spotsAlotted: Int
    startDate: Date!
    status: GlobalStatusType!
}

input SaveGymInput {
    address: addressInput!
    amenities: [String!]
    brandId: ID!
    email: String!
    id: ID
    images: [String!]!
    legalName: String!
    name: String!
    phone: String!
    status: GymStatus!
}

input SaveGymOperatingHoursInput {
    closeAllDay: Boolean
    day: Int!
    openAllDay: Boolean
    openDuration: Int
    openTime: LocalTime
}

input SaveGymStatusInput {
    id: ID!
    status: GymStatus!
}

input SaveInstructorInput {
    brandId: ID!
    contactNumber: String!
    email: String!
    firstName: String!
    gender: GlobalGenderType
    id: ID!
    lastName: String
    photo: String
    status: GlobalStatusType!
}

input SaveInstructorStatusInput {
    id: ID!
    status: GlobalStatusType!
}

input SaveLanguageCountryInput {
    countryId: ID!
    id: ID
    languageId: ID!
}

input SaveMembershipCategoryInput {
    accessType: MembershipAccessType!
    description: String
    id: ID
    image: String
    name: String!
    referenceTypeId: ID!
    status: GlobalStatusType!
}

input SaveMembershipInput {
    accessType: MembershipAccessType!
    age: AgeInput!
    allowedCheckins: Int
    amount: CurrencyValue!
    countryId: ID!
    description: String
    gender: GlobalGenderType!
    gracePeriod: Int
    id: ID
    image: String!
    isWeekelyScheduled: Boolean!
    lifetime: Boolean
    membershipCategoryId: ID!
    membershipSubCategoryId: ID!
    name: String!
    period: Int
    referenceTypeId: ID!
    status: GlobalStatusType!
}

input SaveMembershipSubCategoryInput {
    description: String
    id: ID
    image: String
    membershipCategoryId: ID!
    name: String!
    status: GlobalStatusType!
}

input SavePassInput {
    accessType: PassAccessType!
    age: AgeInput!
    allowedCheckins: Int!
    amount: Int!
    gender: GlobalGenderType!
    gracePeriod: Int!
    id: ID
    name: String!
    period: Int!
    photo: String!
    referenceTypeId: ID!
    status: GlobalStatusType!
    type: PassType!
}

input SavePermissionInput {
    description: String
    id: ID
    name: String!
    roles: [ID]
    status: GlobalStatusType!
}

input SaveRoleInput {
    description: String
    id: ID
    name: String!
    permissions: [ID]
    status: GlobalStatusType!
}

input SaveRolePermissionInput {
    id: ID
    permissionId: ID!
    roleId: ID!
}

input SaveRolesPermissionsTableInput {
    permissionId: ID!
    roleId: ID!
}

input addressInput {
    building: String
    city: String!
    countryId: ID!
    floorNo: String
    id: ID
    "The longitude component of the geo coordinates for this address, in degrees"
    latitude: Float!
    "The longitude component of the geo coordinates for this address, in degrees"
    longitude: Float!
    shortAddress: String
    state: String
    street: String
    unitNumber: String!
    zipCode: String!
}


"Scalar used to describe currency amounts. Serialized as a string to retain decimal precision."
scalar CurrencyValue

"A day in format 'yyyy-mm-dd'"
scalar Date

"An 24-hour time expressed as an hour/minute pair in local time, i.e. '18:00'"
scalar LocalTime

"An iso 8601 date-time string"
scalar Datetime